    # Record vfamily of model.y if vglm (currently only tobit)#
    if(isVglm.y){#
        VfamilyY <- model.y@family@vfamily#
    }
Y.cens
getwd()
q()
ls()
fds
mkl;
ls()
installed.packages()
ls()
ls
help(devAskNewPage)
library(mediation)
example(medsens)
list()
list(NULL, length=4)
list(rep(NA, 4))
as.list(rep(NA, 4))
length(as.list(rep(NA, 4)))
which
showMethods("which")
help(next)
help("next")
!1
along(1:5)
seq(along=1:5)
along(1:5)
c <- rnorm(3)
seq(along=c)
example(expression)
ex1]
ex1
expression(paste("Proportion Mediated"[1], (rho)))
example(plotmath)
data(jobs)
model.y <- glm(work1 ~ treat + job_seek + depress1 + econ_hard + sex + age + occp#
+ marital + nonwhite + educ + income, family = binomial(link = "probit"), data = jobs)
model.m <- lm(job_seek ~ treat + depress1 + econ_hard + sex + age + occp + marital#
+ nonwhite + educ + income, data = jobs)
med.bout <- mediate(model.m, model.y, sims = 100, treat = "treat",#
 mediator = "job_seek")
sens.bout <- medsens(med.bout, rho.by = 0.05, sims = 100)
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
gedwd()
getwd()
o
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
med.bout$INT
med.bout$type
sens.bout$type
debug("plot.medsens")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
whichplot
Q
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
example(bquote)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
source("medsens.R")
plot(sens.bout, sens.par = "rho", pr.plot = TRUE)
a <- c(1,0,1,1)
paste(a)
as.logical(paste(a))
a <- 1011
paste(a)
paste(a, sep="")
strsplit(a)
strsplit(a, "")
strsplit(as.character(a), "")
strsplit(paste(a), "")
unlist(strsplit(paste(a), ""))
numeric(strsplit(paste(a), "")[[1]])
as.numeric(strsplit(paste(a), "")[[1]])
r
source("medsens.R")
example(medsens)
plot(sens.cont)
plot(sens.bout)
sens.bout$type
debug(medsens)
plot(sens.bout)
debug(plot.medsens)
plot(sens.bout)
etype.vec
out[[1]]
out[[2]]
out[[3]]
out[[4]]
Q
source("medsens.R")
plot(sens.bout)
plot(sens.cout)
plot(sens.cont)
source("medsens.R")
plot(sens.cont)
plot(sens.bout)
source("medsens.R")
plot(sens.bout, type="R2")
plot(sens.bout, sens.type="R2")
warnings()
source("medsens.R")
plot(sens.bout, sens.par="R2")
plot(sens.cont, sens.par="R2")
plot(sens.bout, sens.par="R2")
plot(sens.cont, sens.par="R2")
plot(sens.cont, sens.par="R2", sign="negative")
plot(sens.bout, sens.par="R2", sign="negative")
plot(sens.bout, sens.par="R2", sign="negative", r.type = "total")
source("medsens.R")
plot(sens.bout, sens.par="R2", sign="negative", r.type = "total")
source("medsens.R")
plot(sens.bout, sens.par="R2", sign="negative")
debug(plot.medsens)
plot(sens.bout, sens.par="R2", sign="negative")
bquote(paste("(", R[M]^{2},"*,", R[Y]^2,"*), sgn", #
                                    (lambda[2]*lambda[3])==.(sgnlab)))
bquote("(", R[M]^{2},"*,", R[Y]^2,"*), sgn", #
                                    (lambda[2]*lambda[3])==.(sgnlab))
source("medsens.R")
plot(sens.bout, sens.par="R2", sign="negative")
source("medsens.R")
plot(sens.bout, sens.par="R2", sign="negative")
plot(sens.cont, sens.par="R2", sign="negative")
source("medsens.R")
plot(sens.cont, sens.par="R2", sign="negative")
debug(plot.medsens)
plot(sens.cont, sens.par="R2", sign="negative")
ma
ma <- switch(wh, bquote(paste(.(o$labs[1])[.(o$labs[3])])),#
           					   bquote(paste(.(o$labs[1]))))
ma
wh
ma <- switch(as.numeric(wh), bquote(paste(.(o$labs[1])[.(o$labs[3])])),#
           					   bquote(paste(.(o$labs[1]))))
wh
c(wh)
wh[1]
aswh
source("medsens.R")
plot(sens.cont, sens.par="R2", sign="negative")
source("medsens.R")
plot(sens.cont, sens.par="R2", sign="negative")
debug(plot.medsens)
plot(sens.cont, sens.par="R2", sign="negative")
ma
switch(as.numeric(wh), bquote(paste(.(o$labs[1])[.(o$labs[3])])),#
           					             bquote(paste(.(o$labs[1]))))
           	ma <- switch(wh + 1, bquote(paste(.(o$labs[1])[.(o$labs[3])])),#
           					             bquote(paste(.(o$labs[1]))))
ma
Q
source("medsens.R")
plot(sens.cont, sens.par="R2", sign="negative")
source("medsens.R")
plot(sens.cont, sens.par="R2", sign="negative")
plot(sens.bout, sens.par="R2", sign="negative")
plot.lm
source("medsens.R")
plot(sens.bout, sign="negative")
plot(sens.cont, sens.par="R2", sign="negative")
a <- as.list(1:4)
a
a[[1:4]]$foo <- 3
a[[1:4]] <- 3
a[1:4]$foo <- 3
a[1:4]$foo <- rep(3,4)
a
a[1]
a[1]$foo
a[1]$foo <- 1
help(predict.glm)
help(par)
help(plot.lm)
getwd()
setwd("../man")
library(tools)
Rd2HTML("plot.multimed.Rd", "~/Desktop/tst.html")
warnings()
Rd2HTML("plot.multimed.Rd", "~/Desktop/tst.html")
ls
getwd()
sedwd("../../analysis/example/medsens/")
setwd("../../analysis/example/medsens/")
Data <- read.dta("lawton.dta")#
Data$year <- as.factor(Data$year)#
Data$sex <- as.factor(Data$sex)#
Data$ethnic <- as.factor(Data$ethnic)#
Xnames <- c("year", "age", "sex", "ethnic", "knowdum", "ondum", "pid", "ideology")#
#
## 1. Free speech mechanism#
# 1-A No deliberation#
#
D.nod <- subset(Data, nodspeec|nodinter)#
data <- data.frame(row.names = 1:nrow(D.nod))#
data$Y <- D.nod$mfopinio#
data$T <- D.nod$frame#
data$M <- D.nod$speech#
data$W <- D.nod$impspe#
data <- data.frame(data, D.nod[,Xnames])
library(foreign)
Data <- read.dta("lawton.dta")#
Data$year <- as.factor(Data$year)#
Data$sex <- as.factor(Data$sex)#
Data$ethnic <- as.factor(Data$ethnic)#
Xnames <- c("year", "age", "sex", "ethnic", "knowdum", "ondum", "pid", "ideology")#
#
## 1. Free speech mechanism#
# 1-A No deliberation#
#
D.nod <- subset(Data, nodspeec|nodinter)#
data <- data.frame(row.names = 1:nrow(D.nod))#
data$Y <- D.nod$mfopinio#
data$T <- D.nod$frame#
data$M <- D.nod$speech#
data$W <- D.nod$impspe#
data <- data.frame(data, D.nod[,Xnames])
dim(data)
data
colnames(data)[1:4] <- c("mfopinio", "frame", "speech", "impspe")
head(data)
help(save)
save(data, file="../../../mediation/data/framing.RData")
framing <- data
save(framing, file="../../../mediation/data/framing.RData")
Xnames <- c("year", "age", "sex", "ethnic", "knowdum", "ondum", "pid", "ideology")#
res <- multimed("mfopinio", "speech", "impspe", "frame", Xnames,#
                data = framing, sims = 100, conf = 0.9)#
summary(res)#
plot(res, type = "point")#
plot(res, type = c("sigma", "R2-total"), tgroup = "average")
Xnames <- c("year", "age", "sex", "ethnic", "knowdum", "ondum", "pid", "ideology")#
res <- multimed("mfopinio", "speech", "impspe", "frame", Xnames,#
                data = framing, sims = 100, conf = 0.9)#
summary(res)#
plot(res, type = "point")#
plot(res, type = c("sigma", "R2-total"), tgroup = "average")
data(CO2)
CO2
help(CO2)
getwd()
setwd("../../../mediation/data/")
load("framing.RData")
dims(framing)
dim(framing)
summary(framing)
library(tools)
Rd2HTML("../man/framing.Rd", "~/Desktop/tst.html")
